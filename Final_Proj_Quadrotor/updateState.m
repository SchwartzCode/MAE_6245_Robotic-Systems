function [newState] = updateState(state, input, dt)
    % ========================
    %   ARGUMENTS           ||
    % ========================
    % state - current state of the quadrotor
    % input - control inputs generated by PD controller
    %    dt - time step
    % ========================
    %   RETURNS             ||
    % ========================
    % newState - new state based on previous state, quadrotor dynamics, and
    %            control inputs
    

    % DEFINING CONSTANTS AND STATE SPACE MATRICES
    %=====================================================
    g = 9.81; %[m/s^2]
    Ix = 0.004856; %kg*m^2
    Iy = 0.004856; %kg*m^2
    Iz = 0.008801; %kg*m^2
    m = 0.468; % mass [kg]

    A = zeros(12,12);
    A(1,4) = 1;
    A(2,5) = 1;
    A(3,6) = 1;
    A(8,1) = g;
    A(7,2) = -g;
    A(10,7) = 1;
    A(11,8) = 1;
    A(12,9) = 1;

    B = zeros(12,4);
    B(4,2) = 1/Ix;
    B(5,3) = 1/Iy;
    B(6,4) = 1/Iz;
    B(9,1) = 1/m;

    C = zeros(6,12);
    C(1,1) = 1;
    C(2,2) = 1;
    C(3,3) = 1;
    C(4,10) = 1;
    C(5,11) = 1;
    C(6,12) = 1;
    
    
    % Calculating change in state based on current state and control inputs
    stateDot = A*state + B*input;
    % Calculating next state based on current state, change in state, and
    % time step
    newState = stateDot*dt + state;
end